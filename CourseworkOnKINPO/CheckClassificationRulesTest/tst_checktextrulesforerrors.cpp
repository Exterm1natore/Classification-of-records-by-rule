#include <QtTest>
#include <../ClassificationOfRecordsByRule/ClassificationRules.h>
// add necessary includes here

class checkTextRulesForErrors : public QObject
{
    Q_OBJECT

public:
    checkTextRulesForErrors();
    ~checkTextRulesForErrors();

private slots:
    void rulesFileIsEmpty();
    void repeatingClassNames();
    void repeatingClassificationConditions();
    void noDotAtEndOfRulesText();
    void thereAreTwoDotsinTextOfRules();
    void overHundredClassificationRules();
    void wrongFormatForRuleInput_1();
    void wrongFormatForRuleInput_2();
    void wrongFormatForEnteringRuleWithNumberOfIntegerValues_1();
    void wrongFormatForEnteringRuleWithNumberOfIntegerValues_2();
    void wrongFormatForEnteringRuleWithNumberOfIntegerValues_3();
    void wrongFormatForEnteringRuleWithNumberOfIntegerValues_4();
    void wrongFormatForEnteringRuleWithNumberOfIntegerValues_5();
    void wrongFormatForEnteringRuleWithAnArrayOfIntegerValues_1();
    void wrongFormatForEnteringRuleWithAnArrayOfIntegerValues_2();
    void wrongFormatForEnteringRuleWithAnArrayOfIntegerValues_3();
    void wrongFormatForEnteringRuleWithAnArrayOfIntegerValues_4();
    void wrongFormatForEnteringRuleWithAnArrayOfIntegerValues_5();
    void wrongFormatForEnteringRuleWithAnArrayOfIntegerValues_6();
    void wrongFormatForEnteringRuleWithAnArrayOfIntegerValues_7();
    void incorrectFormatForEnteringRuleWithSingleIntegerValue_1();
    void incorrectFormatForEnteringRuleWithSingleIntegerValue_2();
    void incorrectFormatForEnteringRuleWithSingleIntegerValue_3();
    void incorrectlyEnteredClassName_1();
    void incorrectlyEnteredClassName_2();
    void incorrectlyEnteredClassName_3();
    void incorrectlyEnteredClassName_4();
    void incorrectlyEnteredClassName_5();
    void textRestrictionIncorrectlyEntered_1();
    void textRestrictionIncorrectlyEntered_2();
    void textRestrictionIncorrectlyEntered_3();
    void textRestrictionIncorrectlyEntered_4();
    void theNoFaultRule();
};

checkTextRulesForErrors::checkTextRulesForErrors()
{

}

checkTextRulesForErrors::~checkTextRulesForErrors()
{

}

void checkTextRulesForErrors::rulesFileIsEmpty()
{
    QString textRule = "   ";
    QString expectedText = "Текст правил классификации:\n"
                           "Ошибка! Файл с входными данными правил классификации является пустым.";
    ClassificationRules rules;

    try
    {
        rules.checkClassificationRules(textRule);
        QFAIL("Fail!");
    }
    catch (const QString& errorText)
    {
        QCOMPARE(expectedText, errorText);
    }
}

void checkTextRulesForErrors::repeatingClassNames()
{
    QString textRule = "Запись принадлежит классу \"С покрытием\", если у нее есть свойство \"покрытие\";"
                       "Запись принадлежит классу \"П л о с к и й\", если у нее есть свойство \"размер\", которое представлено девятью значениями;"
                       "Запись принадлежит классу \"С покрытием\", если у нее есть свойство \"цвет\", в составе которого есть значение \"1\";"
                       "Запись принадлежит классу \"Матовый\", если у нее есть свойство \"покрытие\" и значение этого свойства равно \"[1, 99]\".";

    QString expectedText = "Текст правил классификации:\n"
                           "Ошибка! Названия классов не могут повторяться.\n"
                           "Название класса: \"С покрытием\"\n"
                           "Повторение в правилах: 1 и 3";

    ClassificationRules rules;

    try
    {
        rules.checkClassificationRules(textRule);
        QFAIL("Fail!");
    }
    catch (const QString& errorText)
    {
        QCOMPARE(expectedText, errorText);
    }
}

void checkTextRulesForErrors::repeatingClassificationConditions()
{
    QString textRule = "Запись принадлежит классу \"С покрытием\", если у нее есть свойство \"покрытие\";"
                       "Запись принадлежит классу \"П л о с к и й\", если у нее есть свойство \"размер\", которое представлено девятью значениями;"
                       "Запись принадлежит классу \"Синий\", если у нее есть свойство \"покрытие\";"
                       "Запись принадлежит классу \"Матовый\", если у нее есть свойство \"покрытие\" и значение этого свойства равно \"[1, 99]\".";

    QString expectedText = "Текст правил классификации:\n"
                           "Ошибка! Условия классификации не могут повторяться.\n"
                           "Условие классификации: \"если у нее есть свойство \"покрытие\"\"\n"
                           "Повторение в правилах: 1 и 3";

    ClassificationRules rules;

    try
    {
        rules.checkClassificationRules(textRule);
        QFAIL("Fail!");
    }
    catch (const QString& errorText)
    {
        QCOMPARE(expectedText, errorText);
    }
}

void checkTextRulesForErrors::noDotAtEndOfRulesText()
{
    QString textRule = "Запись принадлежит классу \"С покрытием\", если у нее есть свойство \"покрытие\";"
                       "Запись принадлежит классу \"П л о с к и й\", если у нее есть свойство \"размер\", которое представлено девятью значениями;"
                       "Запись принадлежит классу \"Синий\", если у нее есть свойство \"цвет\", в составе которого есть значение \"1\";"
                       "Запись принадлежит классу \"Матовый\", если у нее есть свойство \"покрытие\" и значение этого свойства равно \"[1, 99]\"";

    QString expectedText = "Текст правил классификации:\n"
                           "Ошибка! В конце текста правил классификации должна стоять точка ('.').";

    ClassificationRules rules;

    try
    {
        rules.checkClassificationRules(textRule);
        QFAIL("Fail!");
    }
    catch (const QString& errorText)
    {
        QCOMPARE(expectedText, errorText);
    }
}

void checkTextRulesForErrors::thereAreTwoDotsinTextOfRules()
{
    QString textRule = "Запись принадлежит классу \"С покрытием\", если у нее есть свойство \"покрытие\";"
                       "Запись принадлежит классу \"П л о с к и й\", если у нее есть свойство \"размер\", которое представлено девятью значениями;"
                       "Запись принадлежит классу \"Синий\", если у нее есть свойство \"цвет\", в составе которого есть значение \"1\"."
                       "Запись принадлежит классу \"Матовый\", если у нее есть свойство \"покрытие\" и значение этого свойства равно \"[1, 99]\".";

    QString expectedText = "Текст правил классификации:\n"
                           "Ошибка! В тексте правил классификации может быть только одна точка ('.'), которая должна находится после последнего правила.\n"
                           "Номер ошибочного символа в тексте с правилами классификации: 300";

    ClassificationRules rules;

    try
    {
        rules.checkClassificationRules(textRule);
        QFAIL("Fail!");
    }
    catch (const QString& errorText)
    {
        QCOMPARE(expectedText, errorText);
    }
}

void checkTextRulesForErrors::overHundredClassificationRules()
{
    QString textRule = "Запись принадлежит классу \"Автомобиль\", если у нее есть свойство \"встроенныединамики\";"
                       "Запись принадлежит классу \"Балерина\", если у нее есть свойство \"времяотклика\", которое представлено одним значением;"
                       "Запись принадлежит классу \"Велосипед\", если у нее есть свойство \"скоростьпередачиданн\" и значение этого свойства равно \"[15]\";"
                       "Запись принадлежит классу \"Гитара\", если у нее есть свойство \"скоростьпечати\" и значение этого свойства равно \"[2]\";"
                       "Запись принадлежит классу \"Дом\", если у нее есть свойство \"температура\" и значение этого свойства равно \"[37,89]\";"
                       "Запись принадлежит классу \"Единорог\", если у нее есть свойство \"материал\";"
                       "Запись принадлежит классу \"Фонарь\", если у нее есть свойство \"ширина\";"
                       "Запись принадлежит классу \"Глобус\", если у нее есть свойство \"съемность\" и значение этого свойства равно \"[30]\";"
                       "Запись принадлежит классу \"Холодильник\", если у нее есть свойство \"цвет\", которое представлено одним значением;"
                       "Запись принадлежит классу \"Игрушка\", если у нее есть свойство \"прозрачность\", которое представлено тремя значениями;"
                       "Запись принадлежит классу \"Йога\", если у нее есть свойство \"плотность\";"
                       "Запись принадлежит классу \"Кот\", если у нее есть свойство \"нейтральность\";"
                       "Запись принадлежит классу \"Луна\", если у нее есть свойство \"материал\", в составе которого есть значение \"86\";"
                       "Запись принадлежит классу \"Машина\", если у нее есть свойство \"многофункциональност\";"
                       "Запись принадлежит классу \"Небо\", если у нее есть свойство \"отзывчивость\", которое представлено четырьмя значениями;"
                       "Запись принадлежит классу \"Океан\", если у нее есть свойство \"тип\", которое представлено восемью значениями;"
                       "Запись принадлежит классу \"Парашют\", если у нее есть свойство \"оптическийстабилизат\", которое представлено восемью значениями;"
                       "Запись принадлежит классу \"Радуга\", если у нее есть свойство \"влажность\" и значение этого свойства равно \"[68,62]\";"
                       "Запись принадлежит классу \"Солнце\", если у нее есть свойство \"цвет\", в составе которого есть значение \"90\";"
                       "Запись принадлежит классу \"Танцор\", если у нее есть свойство \"функциональность\";"
                       "Запись принадлежит классу \"Утка\", если у нее есть свойство \"уровеньзаряда\", которое представлено четырьмя значениями;"
                       "Запись принадлежит классу \"Фламинго\", если у нее есть свойство \"автоматическийвыборр\", в составе которого есть значение \"39\";"
                       "Запись принадлежит классу \"Холм\", если у нее есть свойство \"качество\";"
                       "Запись принадлежит классу \"Цветок\", если у нее есть свойство \"времяотклика\", которое представлено четырьмя значениями;"
                       "Запись принадлежит классу \"Чайник\", если у нее есть свойство \"длина\" и значение этого свойства равно \"[88,33,51]\";"
                       "Запись принадлежит классу \"Шар\", если у нее есть свойство \"циклработы\" и значение этого свойства равно \"[36,56,56,99,10]\";"
                       "Запись принадлежит классу \"Щука\", если у нее есть свойство \"расходэнергиивожидан\", в составе которого есть значение \"29\";"
                       "Запись принадлежит классу \"Экран\", если у нее есть свойство \"длина\" и значение этого свойства равно \"[96,44,9,98]\";"
                       "Запись принадлежит классу \"Юмор\", если у нее есть свойство \"скоростьпередачиданн\", в составе которого есть значение \"16\";"
                       "Запись принадлежит классу \"Яхта\", если у нее есть свойство \"шифрованиеданных\", в составе которого есть значение \"31\";"
                       "Запись принадлежит классу \"Апельсин\", если у нее есть свойство \"оптическийстабилизат\", которое представлено одним значением;"
                       "Запись принадлежит классу \"Бабочка\", если у нее есть свойство \"максимальнаянагрузка\", которое представлено четырьмя значениями;"
                       "Запись принадлежит классу \"Виолончель\", если у нее есть свойство \"циклработы\", в составе которого есть значение \"82\";"
                       "Запись принадлежит классу \"Галактика\", если у нее есть свойство \"циклработы\", в составе которого есть значение \"9\";"
                       "Запись принадлежит классу \"Дракон\", если у нее есть свойство \"эффективностьработы\", которое представлено пятью значениями;"
                       "Запись принадлежит классу \"Ель\", если у нее есть свойство \"цвет\", которое представлено четырьмя значениями;"
                       "Запись принадлежит классу \"Ферма\", если у нее есть свойство \"толщина\", которое представлено девятью значениями;"
                       "Запись принадлежит классу \"Газель\", если у нее есть свойство \"количество\", которое представлено тремя значениями;"
                       "Запись принадлежит классу \"Хор\", если у нее есть свойство \"размер\", которое представлено девятью значениями;"
                       "Запись принадлежит классу \"Иглу\", если у нее есть свойство \"уровеньшума\", в составе которого есть значение \"3\";"
                       "Запись принадлежит классу \"Картина\", если у нее есть свойство \"интуитивныйинтерфейс\", которое представлено пятью значениями;"
                       "Запись принадлежит классу \"Лампа\", если у нее есть свойство \"конфигурация\", которое представлено шестью значениями;"
                       "Запись принадлежит классу \"Море\", если у нее есть свойство \"времяработы\" и значение этого свойства равно \"[21,67,55,84,52]\";"
                       "Запись принадлежит классу \"Носки\", если у нее есть свойство \"эргономика\", которое представлено тремя значениями;"
                       "Запись принадлежит классу \"Орел\", если у нее есть свойство \"защитаотпыли\" и значение этого свойства равно \"[37,14,38,98]\";"
                       "Запись принадлежит классу \"Птица\", если у нее есть свойство \"материал\" и значение этого свойства равно \"[94,30,76]\";"
                       "Запись принадлежит классу \"Ракета\", если у нее есть свойство \"напряжение\", в составе которого есть значение \"70\";"
                       "Запись принадлежит классу \"Солнечный луч\", если у нее есть свойство \"магнитнаясовместимос\", которое представлено девятью значениями;"
                       "Запись принадлежит классу \"Тигр\", если у нее есть свойство \"оптическийстабилизат\";"
                       "Запись принадлежит классу \"Узор\", если у нее есть свойство \"гироскопическаястаби\";"
                       "Запись принадлежит классу \"Фонарик\", если у нее есть свойство \"автоматическийвыборр\", в составе которого есть значение \"48\";"
                       "Запись принадлежит классу \"Хомяк\", если у нее есть свойство \"амортизация\";"
                       "Запись принадлежит классу \"Цирк\", если у нее есть свойство \"эмиссия\", в составе которого есть значение \"64\";"
                       "Запись принадлежит классу \"Чехол\", если у нее есть свойство \"уровенькомфорта\";"
                       "Запись принадлежит классу \"Шоколад\", если у нее есть свойство \"срокслужбы\" и значение этого свойства равно \"[60,15,56]\";"
                       "Запись принадлежит классу \"Щенок\", если у нее есть свойство \"стабилизацияизображе\" и значение этого свойства равно \"[69,89,65,86,46]\";"
                       "Запись принадлежит классу \"Эксперимент\", если у нее есть свойство \"цветоваятемпература\" и значение этого свойства равно \"[50,4,54]\";"
                       "Запись принадлежит классу \"Юрист\", если у нее есть свойство \"эмиссия\", которое представлено восемью значениями;"
                       "Запись принадлежит классу \"Ягода\", если у нее есть свойство \"размер\", в составе которого есть значение \"82\";"
                       "Запись принадлежит классу \"Аптека\", если у нее есть свойство \"стабилизацияизображе\" и значение этого свойства равно \"[71,49,10,26,87]\";"
                       "Запись принадлежит классу \"Банк\", если у нее есть свойство \"скоростьпередачиданн\", которое представлено четырьмя значениями;"
                       "Запись принадлежит классу \"Весна\", если у нее есть свойство \"уровенькомфорта\", которое представлено семью значениями;"
                       "Запись принадлежит классу \"Гора\", если у нее есть свойство \"уровеньзаряда\", которое представлено шестью значениями;"
                       "Запись принадлежит классу \"Деньги\", если у нее есть свойство \"странапроизводства\" и значение этого свойства равно \"[98,8,29,77,62]\";"
                       "Запись принадлежит классу \"Жемчуг\", если у нее есть свойство \"напряжение\" и значение этого свойства равно \"[92]\";"
                       "Запись принадлежит классу \"Змея\", если у нее есть свойство \"длина\", которое представлено тремя значениями;"
                       "Запись принадлежит классу \"Игла\", если у нее есть свойство \"системаохлаждения\";"
                       "Запись принадлежит классу \"Карта\", если у нее есть свойство \"цена\" и значение этого свойства равно \"[54,31]\";"
                       "Запись принадлежит классу \"Полнолуние\", если у нее есть свойство \"конфигурация\", в составе которого есть значение \"77\";"
                       "Запись принадлежит классу \"Маска\", если у нее есть свойство \"регулировкавысоты\", в составе которого есть значение \"69\";"
                       "Запись принадлежит классу \"Нож\", если у нее есть свойство \"стабилизацияизображе\";"
                       "Запись принадлежит классу \"Речка\", если у нее есть свойство \"мощность\" и значение этого свойства равно \"[95,8,67]\";"
                       "Запись принадлежит классу \"Палец\", если у нее есть свойство \"скоростьпечати\" и значение этого свойства равно \"[43]\";"
                       "Запись принадлежит классу \"Робот\", если у нее есть свойство \"сопротивление\", в составе которого есть значение \"26\";"
                       "Запись принадлежит классу \"Сок\", если у нее есть свойство \"максимальнаянагрузка\", в составе которого есть значение \"77\";"
                       "Запись принадлежит классу \"Телефон\", если у нее есть свойство \"материал\" и значение этого свойства равно \"[9,91,15,44,77]\";"
                       "Запись принадлежит классу \"Ухо\", если у нее есть свойство \"уровеньяркости\", в составе которого есть значение \"72\";"
                       "Запись принадлежит классу \"Фишка\", если у нее есть свойство \"уровеньзаряда\";"
                       "Запись принадлежит классу \"Художник\", если у нее есть свойство \"индикация\", которое представлено девятью значениями;"
                       "Запись принадлежит классу \"Цвет\", если у нее есть свойство \"скоростьпередачиданн\", которое представлено двумя значениями;"
                       "Запись принадлежит классу \"Чемодан\", если у нее есть свойство \"индикация\";"
                       "Запись принадлежит классу \"Школа\", если у нее есть свойство \"влажность\", которое представлено одним значением;"
                       "Запись принадлежит классу \"Щит\", если у нее есть свойство \"защитаотпыли\", в составе которого есть значение \"4\";"
                       "Запись принадлежит классу \"Электричество\", если у нее есть свойство \"вес\", которое представлено двумя значениями;"
                       "Запись принадлежит классу \"Клерк\", если у нее есть свойство \"интуитивныйинтерфейс\";"
                       "Запись принадлежит классу \"Ястреб\", если у нее есть свойство \"объемпамяти\", которое представлено шестью значениями;"
                       "Запись принадлежит классу \"Спорткар\", если у нее есть свойство \"стиль\", в составе которого есть значение \"2\";"
                       "Запись принадлежит классу \"Гнилой банан\", если у нее есть свойство \"эргономика\" и значение этого свойства равно \"[74,39,11,30]\";"
                       "Запись принадлежит классу \"Крутой велик\", если у нее есть свойство \"съемность\" и значение этого свойства равно \"[56,66,73,43,2]\";"
                       "Запись принадлежит классу \"Бас гитара\", если у нее есть свойство \"гибкость\" и значение этого свойства равно \"[25]\";"
                       "Запись принадлежит классу \"Котедж\", если у нее есть свойство \"времяработы\" и значение этого свойства равно \"[89]\";"
                       "Запись принадлежит классу \"С мандаринками\", если у нее есть свойство \"энергоэффективность\", которое представлено шестью значениями;"
                       "Запись принадлежит классу \"Плато\", если у нее есть свойство \"защитаотультрафиолет\" и значение этого свойства равно \"[24]\";"
                       "Запись принадлежит классу \"Невыносимый\", если у нее есть свойство \"разрешение\" и значение этого свойства равно \"[98,70,78]\";"
                       "Запись принадлежит классу \"Большой\", если у нее есть свойство \"магнитнаясовместимос\";"
                       "Запись принадлежит классу \"Сложный\", если у нее есть свойство \"эластичность\", в составе которого есть значение \"66\";"
                       "Запись принадлежит классу \"С покрытием\", если у нее есть свойство \"покрытие\";"
                       "Запись принадлежит классу \"П л о с к и й\", если у нее есть свойство \"размер\", которое представлено двумя значениями;"
                       "Запись принадлежит классу \"Синий\", если у нее есть свойство \"цвет\", в составе которого есть значение \"1\";"
                       "Запись принадлежит классу \"Матовый\", если у нее есть свойство \"покрытие\" и значение этого свойства равно \"[44, 99]\";"
                       "Запись принадлежит классу \"Test\", если у нее есть свойство \"tests\".";

    QString expectedText = "Текст правил классификации:\n"
                           "Ошибка! Количество записей не должно превышать 100. Допустимый диапазон: [1;100].";

    ClassificationRules rules;

    try
    {
        rules.checkClassificationRules(textRule);
        QFAIL("Fail!");
    }
    catch (const QString& errorText)
    {
        QCOMPARE(expectedText, errorText);
    }
}

void checkTextRulesForErrors::wrongFormatForRuleInput_1()
{
    QString textRule = "Запись принадлежит классу c покрытием, если у нее есть свойство покрытие.";

    QString expectedText = "Текст правил классификации:\n"
                           "Ошибка! В правиле должно быть либо 4, либо 6 двойных кавычек ('\"') в зависимости от типа правила.\n"
                           "Ошибка в правиле 1: Запись принадлежит классу c покрытием, если у нее есть свойство покрытие.";

    ClassificationRules rules;

    try
    {
        rules.checkClassificationRules(textRule);
        QFAIL("Fail!");
    }
    catch (const QString& errorText)
    {
        QCOMPARE(expectedText, errorText);
    }
}

void checkTextRulesForErrors::wrongFormatForRuleInput_2()
{
    QString textRule = "Запись принадлежит классу \"C покрытием\", если у нее есть свойство \"покрытие\" и, если у нее есть свойство \"цвет\".";

    QString expectedText = "Текст правил классификации:\nОшибка! Неверный формат ввода правила."
                           "\nОшибка в правиле 1: Запись принадлежит классу \"C покрытием\", если у нее есть свойство \"покрытие\" и, если у нее есть свойство \"цвет\"."
                           "\n\nДопустимые форматы: "
                           "\n1) 'Запись принадлежит классу \"<название класса>\", если у нее есть свойство \"<название свойства>\"'"
                           "\n2) 'Запись принадлежит классу \"<название класса>\", если у нее есть свойство \"<название свойства>\", которое представлено ([одним|двумя|тремя|четырьмя|пятью|шестью|семью|восемью|девятью]) значением(ями)'"
                           "\n3) 'Запись принадлежит классу \"<название класса>\", если у нее есть свойство \"<название свойства>\", в составе которого есть значение \"<одно целочисленное значение>\"'"
                           "\n4) 'Запись принадлежит классу \"<название класса>\", если у нее есть свойство \"<название свойства>\" и значение этого свойства равно \"[целочисленные значения через ',']\"'";

    ClassificationRules rules;

    try
    {
        rules.checkClassificationRules(textRule);
        QFAIL("Fail!");
    }
    catch (const QString& errorText)
    {
        QCOMPARE(expectedText, errorText);
    }
}

void checkTextRulesForErrors::wrongFormatForEnteringRuleWithNumberOfIntegerValues_1()
{
    QString textRule = "Запись принадлежит классу \"C покрытием\", если у нее есть свойство \"покрытие\", которое представлено десятью значениями.";

    QString expectedText = "Текст правил классификации:\n"
                           "Ошибка! Неверный формат ввода дополнительного ограничения в виде количества целочисленных значений.\n"
                           "Неверно введено количество целочисленных значений (недопустимое значение).\n"
                           "Допустимы следующие значения: одним, двумя, тремя, четырьмя, пятью, шестью, семью, восемью, девятью\n"
                           "Ошибка в правиле 1: Запись принадлежит классу \"C покрытием\", если у нее есть свойство \"покрытие\", которое представлено десятью значениями.";

    ClassificationRules rules;

    try
    {
        rules.checkClassificationRules(textRule);
        QFAIL("Fail!");
    }
    catch (const QString& errorText)
    {
        QCOMPARE(expectedText, errorText);
    }
}

void checkTextRulesForErrors::wrongFormatForEnteringRuleWithNumberOfIntegerValues_2()
{
    QString textRule = "Запись принадлежит классу \"C покрытием\", если у нее есть свойство \"покрытие\", которое представлено пятьюшестью значениями.";

    QString expectedText = "Текст правил классификации:\n"
                           "Ошибка! Неверный формат ввода дополнительного ограничения в виде количества целочисленных значений.\n"
                           "Ограничение по количеству целочисленных значений записи должно быть представлено единственным значением.\n"
                           "Допустимы следующие значения: одним, двумя, тремя, четырьмя, пятью, шестью, семью, восемью, девятью\n"
                           "Ошибка в правиле 1: Запись принадлежит классу \"C покрытием\", если у нее есть свойство \"покрытие\", которое представлено пятьюшестью значениями.";

    ClassificationRules rules;

    try
    {
        rules.checkClassificationRules(textRule);
        QFAIL("Fail!");
    }
    catch (const QString& errorText)
    {
        QCOMPARE(expectedText, errorText);
    }
}

void checkTextRulesForErrors::wrongFormatForEnteringRuleWithNumberOfIntegerValues_3()
{
    QString textRule = "Запись принадлежит классу \"C покрытием\", если у нее есть свойство \"покрытие\", которое представлено одним значениями.";

    QString expectedText = "Текст правил классификации:\n"
                           "Ошибка! Неверный формат ввода дополнительного ограничения в виде количества целочисленных значений.\n"
                           "Если было введено 'одним', то правило должно заканчиваться на 'значением'.\n"
                           "Ошибка в правиле 1: Запись принадлежит классу \"C покрытием\", если у нее есть свойство \"покрытие\", которое представлено одним значениями.";

    ClassificationRules rules;

    try
    {
        rules.checkClassificationRules(textRule);
        QFAIL("Fail!");
    }
    catch (const QString& errorText)
    {
        QCOMPARE(expectedText, errorText);
    }
}

void checkTextRulesForErrors::wrongFormatForEnteringRuleWithNumberOfIntegerValues_4()
{
    QString textRule = "Запись принадлежит классу \"C покрытием\", если у нее есть свойство \"покрытие\", которое представлено пятью значением.";

    QString expectedText = "Текст правил классификации:\n"
                           "Ошибка! Неверный формат ввода дополнительного ограничения в виде количества целочисленных значений.\n"
                           "Если было введено ('двумя' - 'девятью'), то правило должно заканчиваться на 'значениями'.\n"
                           "Ошибка в правиле 1: Запись принадлежит классу \"C покрытием\", если у нее есть свойство \"покрытие\", которое представлено пятью значением.";

    ClassificationRules rules;

    try
    {
        rules.checkClassificationRules(textRule);
        QFAIL("Fail!");
    }
    catch (const QString& errorText)
    {
        QCOMPARE(expectedText, errorText);
    }
}

void checkTextRulesForErrors::wrongFormatForEnteringRuleWithNumberOfIntegerValues_5()
{
    QString textRule = "Запись принадлежит классу \"C покрытием\", если у нее есть свойство \"покрытие\", которое представлено 5 значениями.";

    QString expectedText = "Текст правил классификации:\n"
                           "Ошибка! Неверный формат ввода дополнительного ограничения в виде количества целочисленных значений.\n"
                           "Неверно введено количество целочисленных значений (недопустимое значение).\n"
                           "Допустимы следующие значения: одним, двумя, тремя, четырьмя, пятью, шестью, семью, восемью, девятью\n"
                           "Ошибка в правиле 1: Запись принадлежит классу \"C покрытием\", если у нее есть свойство \"покрытие\", которое представлено 5 значениями.";

    ClassificationRules rules;

    try
    {
        rules.checkClassificationRules(textRule);
        QFAIL("Fail!");
    }
    catch (const QString& errorText)
    {
        QCOMPARE(expectedText, errorText);
    }
}

void checkTextRulesForErrors::wrongFormatForEnteringRuleWithAnArrayOfIntegerValues_1()
{
    QString textRule = "Запись принадлежит классу \"C покрытием\", если у нее есть свойство \"покрытие\" и значение этого свойства равно [12,15].";

    QString expectedText = "Текст правил классификации:\n"
                           "Ошибка! Неверный формат ввода дополнительного ограничения в виде конкретных целочисленных значений. \n"
                           "Ошибка в правиле 1: Запись принадлежит классу \"C покрытием\", если у нее есть свойство \"покрытие\" и значение этого свойства равно [12,15].\n"
                           "Правильный формат:\n"
                           "Запись принадлежит классу \"<название класса>\", если у нее есть свойство \"<текстовое ограничение>\" и значение этого свойства равно \"[<целочисленные значения через ','>]\"";

    ClassificationRules rules;

    try
    {
        rules.checkClassificationRules(textRule);
        QFAIL("Fail!");
    }
    catch (const QString& errorText)
    {
        QCOMPARE(expectedText, errorText);
    }
}

void checkTextRulesForErrors::wrongFormatForEnteringRuleWithAnArrayOfIntegerValues_2()
{
    QString textRule = "Запись принадлежит классу \"C покрытием\", если у нее есть свойство \"покрытие\" и значение этого свойства равно \"12,15\".";

    QString expectedText = "Текст правил классификации:\n"
                           "Ошибка! Неверный формат ввода дополнительного ограничения в виде конкретных целочисленных значений. \n"
                           "Ошибка в правиле 1: Запись принадлежит классу \"C покрытием\", если у нее есть свойство \"покрытие\" и значение этого свойства равно \"12,15\".\n"
                           "Правильный формат:\n"
                           "Запись принадлежит классу \"<название класса>\", если у нее есть свойство \"<текстовое ограничение>\" и значение этого свойства равно \"[<целочисленные значения через ','>]\"";

    ClassificationRules rules;

    try
    {
        rules.checkClassificationRules(textRule);
        QFAIL("Fail!");
    }
    catch (const QString& errorText)
    {
        QCOMPARE(expectedText, errorText);
    }
}

void checkTextRulesForErrors::wrongFormatForEnteringRuleWithAnArrayOfIntegerValues_3()
{
    QString textRule = "Запись принадлежит классу \"C покрытием\", если у нее есть свойство \"покрытие\" и значение этого свойства равно [].";

    QString expectedText = "Текст правил классификации:\n"
                           "Ошибка! Неверный формат ввода дополнительного ограничения в виде конкретных целочисленных значений. (между символами '[' ']' должно быть от 1 до 9 целочисленных значений).\n"
                           "Ошибка в правиле 1: Запись принадлежит классу \"C покрытием\", если у нее есть свойство \"покрытие\" и значение этого свойства равно [].";

    ClassificationRules rules;

    try
    {
        rules.checkClassificationRules(textRule);
        QFAIL("Fail!");
    }
    catch (const QString& errorText)
    {
        QCOMPARE(expectedText, errorText);
    }
}

void checkTextRulesForErrors::wrongFormatForEnteringRuleWithAnArrayOfIntegerValues_4()
{
    QString textRule = "Запись принадлежит классу \"C покрытием\", если у нее есть свойство \"покрытие\" и значение этого свойства равно \"[100]\".";

    QString expectedText = "Текст правил классификации:\n"
                           "Ошибка! Неверный формат ввода дополнительного ограничения в виде конкретных целочисленных значений. \n"
                           "Между символами '[' и ']' числа должны лежать в диапазоне [1;99].\n"
                           "Вы ввели: 100\n"
                           "Ошибка в правиле 1: Запись принадлежит классу \"C покрытием\", если у нее есть свойство \"покрытие\" и значение этого свойства равно \"[100]\".";

    ClassificationRules rules;

    try
    {
        rules.checkClassificationRules(textRule);
        QFAIL("Fail!");
    }
    catch (const QString& errorText)
    {
        QCOMPARE(expectedText, errorText);
    }
}

void checkTextRulesForErrors::wrongFormatForEnteringRuleWithAnArrayOfIntegerValues_5()
{
    QString textRule = "Запись принадлежит классу \"C покрытием\", если у нее есть свойство \"покрытие\" и значение этого свойства равно \"[1 2]\".";

    QString expectedText = "Текст правил классификации:\n"
                           "Ошибка! Неверный формат ввода дополнительного ограничения в виде конкретных целочисленных значений. \n"
                           "Между символами '[' и ']' после числа должна стоять запятая (',').\n"
                           "Ошибка в правиле 1: Запись принадлежит классу \"C покрытием\", если у нее есть свойство \"покрытие\" и значение этого свойства равно \"[1 2]\".";

    ClassificationRules rules;

    try
    {
        rules.checkClassificationRules(textRule);
        QFAIL("Fail!");
    }
    catch (const QString& errorText)
    {
        QCOMPARE(expectedText, errorText);
    }
}

void checkTextRulesForErrors::wrongFormatForEnteringRuleWithAnArrayOfIntegerValues_6()
{
    QString textRule = "Запись принадлежит классу \"C покрытием\", если у нее есть свойство \"покрытие\" и значение этого свойства равно \"[1,2,3,4,5,6,7,8,9,10]\".";

    QString expectedText = "Текст правил классификации:\n"
                           "Ошибка! Неверный формат ввода дополнительного ограничения в виде конкретных целочисленных значений. \n"
                           "Количество целочисленных значений между символами '[' и ']' должно быть от 1 до 9.\n"
                           "Вы ввели 10 значений.\n"
                           "Ошибка в правиле 1: Запись принадлежит классу \"C покрытием\", если у нее есть свойство \"покрытие\" и значение этого свойства равно \"[1,2,3,4,5,6,7,8,9,10]\".";

    ClassificationRules rules;

    try
    {
        rules.checkClassificationRules(textRule);
        QFAIL("Fail!");
    }
    catch (const QString& errorText)
    {
        QCOMPARE(expectedText, errorText);
    }
}

void checkTextRulesForErrors::wrongFormatForEnteringRuleWithAnArrayOfIntegerValues_7()
{
    QString textRule = "Запись принадлежит классу \"C покрытием\", если у нее есть свойство \"покрытие\" и значение этого свойства равно \"[1,999999999999999999]\".";

    QString expectedText = "Текст правил классификации:\n"
                           "Ошибка! Неверный формат ввода дополнительного ограничения в виде одного целочисленного значения. \n"
                           "Целочисленные значения должны лежать в диапазоне [1;99] (0 перед числом писать нельзя).\n"
                           "Вы ввели: 999999999999999999\n"
                           "Ошибка в правиле 1: Запись принадлежит классу \"C покрытием\", если у нее есть свойство \"покрытие\" и значение этого свойства равно \"[1,999999999999999999]\".";

    ClassificationRules rules;

    try
    {
        rules.checkClassificationRules(textRule);
        QFAIL("Fail!");
    }
    catch (const QString& errorText)
    {
        QCOMPARE(expectedText, errorText);
    }
}

void checkTextRulesForErrors::incorrectFormatForEnteringRuleWithSingleIntegerValue_1()
{
    QString textRule = "Запись принадлежит классу \"C покрытием\", если у нее есть свойство \"покрытие\", в составе которого есть значение \"0\".";

    QString expectedText = "Текст правил классификации:\n"
                           "Ошибка! Неверный формат ввода дополнительного ограничения в виде одного целочисленного значения. \n"
                           "Целочисленное значение должно лежать в диапазоне [1;99].\n"
                           "Вы ввели: 0\n"
                           "Ошибка в правиле 1: Запись принадлежит классу \"C покрытием\", если у нее есть свойство \"покрытие\", в составе которого есть значение \"0\".";

    ClassificationRules rules;

    try
    {
        rules.checkClassificationRules(textRule);
        QFAIL("Fail!");
    }
    catch (const QString& errorText)
    {
        QCOMPARE(expectedText, errorText);
    }
}

void checkTextRulesForErrors::incorrectFormatForEnteringRuleWithSingleIntegerValue_2()
{
    QString textRule = "Запись принадлежит классу \"C покрытием\", если у нее есть свойство \"покрытие\", в составе которого есть значение \"1,2\".";

    QString expectedText = "Текст правил классификации:\n"
                           "Ошибка! Неверный формат ввода дополнительного ограничения в виде одного целочисленного значения. \n"
                           "Между последними двумя символами ' \" ' должно быть только положительное целочисленное значение и только одно.\n"
                           "Вы ввели: \"1,2\"\n"
                           "Ошибка в правиле 1: Запись принадлежит классу \"C покрытием\", если у нее есть свойство \"покрытие\", в составе которого есть значение \"1,2\".";

    ClassificationRules rules;

    try
    {
        rules.checkClassificationRules(textRule);
        QFAIL("Fail!");
    }
    catch (const QString& errorText)
    {
        QCOMPARE(expectedText, errorText);
    }
}

void checkTextRulesForErrors::incorrectFormatForEnteringRuleWithSingleIntegerValue_3()
{
    QString textRule = "Запись принадлежит классу \"C покрытием\", если у нее есть свойство \"покрытие\", в составе которого есть значение \" \".";

    QString expectedText = "Текст правил классификации:\n"
                           "Ошибка! Неверный формат ввода дополнительного ограничения в виде одного целочисленного значения. \n"
                           "Между последними двумя символами ' \" ' должно быть только положительное целочисленное значение и только одно.\n"
                           "Вы ввели: \" \"\n"
                           "Ошибка в правиле 1: Запись принадлежит классу \"C покрытием\", если у нее есть свойство \"покрытие\", в составе которого есть значение \" \".";

    ClassificationRules rules;

    try
    {
        rules.checkClassificationRules(textRule);
        QFAIL("Fail!");
    }
    catch (const QString& errorText)
    {
        QCOMPARE(expectedText, errorText);
    }
}

void checkTextRulesForErrors::incorrectlyEnteredClassName_1()
{
    QString textRule = "Запись принадлежит классу \" покрытием\", если у нее есть свойство \"покрытие\".";

    QString expectedText = "Текст правил классификации:\n"
                           "Ошибка! Внутри двойных кавычек ('\"') в названии класса и текстовом ограничении текст не может начинаться и заканчиваться не буквой.\n"
                           "Вы ввели:  покрытием\n"
                           "Ошибка в правиле 1: Запись принадлежит классу \" покрытием\", если у нее есть свойство \"покрытие\".";

    ClassificationRules rules;

    try
    {
        rules.checkClassificationRules(textRule);
        QFAIL("Fail!");
    }
    catch (const QString& errorText)
    {
        QCOMPARE(expectedText, errorText);
    }
}

void checkTextRulesForErrors::incorrectlyEnteredClassName_2()
{
    QString textRule = "Запись принадлежит классу \"c покрытием\", если у нее есть свойство \"покрытие\".";

    QString expectedText = "Текст правил классификации:\n"
                           "Ошибка! Название класса должно начинаться с заглавной буквы.\n"
                           "Вы ввели: \"c покрытием\"\n"
                           "Ошибка в правиле 1: Запись принадлежит классу \"c покрытием\", если у нее есть свойство \"покрытие\".";

    ClassificationRules rules;

    try
    {
        rules.checkClassificationRules(textRule);
        QFAIL("Fail!");
    }
    catch (const QString& errorText)
    {
        QCOMPARE(expectedText, errorText);
    }
}

void checkTextRulesForErrors::incorrectlyEnteredClassName_3()
{
    QString textRule = "Запись принадлежит классу \"C  покрытием\", если у нее есть свойство \"покрытие\".";

    QString expectedText = "Текст правил классификации:\n"
                           "Ошибка! В тексте правила не допускается использовать больше одного пробела подряд.\n"
                           "Ошибка в правиле 1: Запись*принадлежит*классу*\"C**покрытием\",*если*у*нее*есть*свойство*\"покрытие\".";

    ClassificationRules rules;

    try
    {
        rules.checkClassificationRules(textRule);
        QFAIL("Fail!");
    }
    catch (const QString& errorText)
    {
        QCOMPARE(expectedText, errorText);
    }
}

void checkTextRulesForErrors::incorrectlyEnteredClassName_4()
{
    QString textRule = "Запись принадлежит классу \"C, покрытием\", если у нее есть свойство \"покрытие\".";

    QString expectedText = "Текст правил классификации:\n"
                           "Ошибка! В названии класса допускается использование только букв русского или английского алфавита и пробелов (не больше одного подряд).\n"
                           "Вы ввели: C, покрытием\n"
                           "Ошибка в правиле 1: Запись принадлежит классу \"C, покрытием\", если у нее есть свойство \"покрытие\".";

    ClassificationRules rules;

    try
    {
        rules.checkClassificationRules(textRule);
        QFAIL("Fail!");
    }
    catch (const QString& errorText)
    {
        QCOMPARE(expectedText, errorText);
    }
}

void checkTextRulesForErrors::incorrectlyEnteredClassName_5()
{
    QString textRule = "Запись принадлежит классу \"C покHытием\", если у нее есть свойство \"покрытие\".";

    QString expectedText = "Текст правил классификации:\n"
                           "Ошибка! В названии класса все буквы, кроме первой, должны быть в нижнем регистре.\n"
                           "Вы ввели: C покHытием\n"
                           "Ошибка в правиле 1: Запись принадлежит классу \"C покHытием\", если у нее есть свойство \"покрытие\".";

    ClassificationRules rules;

    try
    {
        rules.checkClassificationRules(textRule);
        QFAIL("Fail!");
    }
    catch (const QString& errorText)
    {
        QCOMPARE(expectedText, errorText);
    }
}

void checkTextRulesForErrors::textRestrictionIncorrectlyEntered_1()
{
    QString textRule = "Запись принадлежит классу \"C покытием\", если у нее есть свойство \" \".";

    QString expectedText = "Текст правил классификации:\n"
                           "Ошибка! Внутри двойных кавычек ('\"') в названии класса и текстовом ограничении текст не может начинаться и заканчиваться не буквой.\n"
                           "Вы ввели:  \n"
                           "Ошибка в правиле 1: Запись принадлежит классу \"C покытием\", если у нее есть свойство \" \".";

    ClassificationRules rules;

    try
    {
        rules.checkClassificationRules(textRule);
        QFAIL("Fail!");
    }
    catch (const QString& errorText)
    {
        QCOMPARE(expectedText, errorText);
    }
}

void checkTextRulesForErrors::textRestrictionIncorrectlyEntered_2()
{
    QString textRule = "Запись принадлежит классу \"C покытием\", если у нее есть свойство \" покрытие \".";

    QString expectedText = "Текст правил классификации:\n"
                           "Ошибка! Внутри двойных кавычек ('\"') в названии класса и текстовом ограничении текст не может начинаться и заканчиваться не буквой.\n"
                           "Вы ввели:  покрытие \n"
                           "Ошибка в правиле 1: Запись принадлежит классу \"C покытием\", если у нее есть свойство \" покрытие \".";

    ClassificationRules rules;

    try
    {
        rules.checkClassificationRules(textRule);
        QFAIL("Fail!");
    }
    catch (const QString& errorText)
    {
        QCOMPARE(expectedText, errorText);
    }
}

void checkTextRulesForErrors::textRestrictionIncorrectlyEntered_3()
{
    QString textRule = "Запись принадлежит классу \"C покытием\", если у нее есть свойство \"Покрытие\".";

    QString expectedText = "Текст правил классификации:\n"
                           "Ошибка! Текстовое ограничение может содержать только буквы в нижнем регистре.\n"
                           "Вы ввели: Покрытие\n"
                           "Ошибка в правиле 1: Запись принадлежит классу \"C покытием\", если у нее есть свойство \"Покрытие\".";

    ClassificationRules rules;

    try
    {
        rules.checkClassificationRules(textRule);
        QFAIL("Fail!");
    }
    catch (const QString& errorText)
    {
        QCOMPARE(expectedText, errorText);
    }
}

void checkTextRulesForErrors::textRestrictionIncorrectlyEntered_4()
{
    QString textRule = "Запись принадлежит классу \"C покытием\", если у нее есть свойство \"пок,рытие\".";

    QString expectedText = "Текст правил классификации:\n"
                           "Ошибка! Текстовое ограничение может содержать только буквы русского или английского алфавита и не должно содержать пробелы.\n"
                           "Вы ввели: пок,рытие\n"
                           "Ошибка в правиле 1: Запись принадлежит классу \"C покытием\", если у нее есть свойство \"пок,рытие\".";

    ClassificationRules rules;

    try
    {
        rules.checkClassificationRules(textRule);
        QFAIL("Fail!");
    }
    catch (const QString& errorText)
    {
        QCOMPARE(expectedText, errorText);
    }
}

void checkTextRulesForErrors::theNoFaultRule()
{
    QString textRule = "Запись принадлежит классу \"C покытием\", если у нее есть свойство \"покрытие\".";

    ClassificationRules rules;

    try
    {
        rules.checkClassificationRules(textRule);
        QVERIFY(true);
    }
    catch (const QString& errorText)
    {
        QFAIL("Fail!");
    }
}

QTEST_APPLESS_MAIN(checkTextRulesForErrors)

#include "tst_checkTextRulesForErrors.moc"
